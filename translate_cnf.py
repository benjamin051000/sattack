import sys
import re
from typing import List
from pprint import pprint

# Easy way to toggle debug printing
DEBUG = True


def split_by_section(text: str) -> List[str]:
    # First, we need the mapping of variables to literals.
    sections = re.split(r"c\s*\n", text)
    del sections[0]  # Just says "c generated by ezSAT"
    return sections


def parse_mappings(text: str):
    mappings = re.findall(r"-?(\d+):\s(\S+)", text)
    return dict(mappings)


def parse_clauses(text: str):
    # Remove first line, which says "p cnf n n"
    text = ''.join(text.splitlines(keepends=True)[1:])
    # Get all numbers
    numbers = re.findall(r"-?\d+", text)

    # Now do some organization
    clauses = ' '.join(numbers).split('0')
    formatted = [tuple(c.split()) for c in clauses]

    return formatted


def parse_cnf(text: str):

    # Split the file into 3 sections
    sections = split_by_section(text)

    # First section is mappings from variable to literal
    var_to_lit = parse_mappings(sections[0])

    # Second section is mappings from variable to expression
    var_to_expr = parse_mappings(sections[1])
    
    # Last section is the list of clauses
    clauses = parse_clauses(sections[2])

    return var_to_lit, var_to_expr, clauses


def main():
    # Load the file supplied by cli arg
    try:
        with open(sys.argv[1]) as f:
            text = f.read()
    except IndexError:
        print("Usage: python translate_cnf.py <DIMACS CNF file>")
        exit()

    # Parse the file into its relevant information
    var_to_lit, var_to_expr, clauses = parse_cnf(text)
    print("Variable -> Literal")
    pprint(var_to_lit)

    print("Variable -> Expression")
    pprint(var_to_expr)

    print("Clauses:")
    pprint(clauses)


if __name__ == '__main__':
    main()

